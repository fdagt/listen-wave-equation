class Wave{#samplePerSec;#sampleCount;#buffer;static#fmtChunkOffset=12
static#dataChunkOffset=36;constructor(samplePerSec,sampleCount){this.#samplePerSec=samplePerSec;this.#sampleCount=sampleCount;const fileSize=12+24+8+2*sampleCount;this.#buffer=new Uint8Array(fileSize);for(let i=0;i<4;++i){this.#buffer[i]="RIFF".charCodeAt(i);this.#buffer[i+8]="WAVE".charCodeAt(i);this.#buffer[i+Wave.#fmtChunkOffset]="fmt ".charCodeAt(i);this.#buffer[i+Wave.#dataChunkOffset]="data".charCodeAt(i);}
Wave.writeInt32(this.#buffer,4,fileSize-8);Wave.writeInt32(this.#buffer,Wave.#fmtChunkOffset+4,16);Wave.writeInt32(this.#buffer,Wave.#dataChunkOffset+4,sampleCount*2);Wave.writeInt16(this.#buffer,Wave.#fmtChunkOffset+8,1);Wave.writeInt16(this.#buffer,Wave.#fmtChunkOffset+10,1);Wave.writeInt32(this.#buffer,Wave.#fmtChunkOffset+12,samplePerSec);Wave.writeInt32(this.#buffer,Wave.#fmtChunkOffset+16,samplePerSec*2);Wave.writeInt16(this.#buffer,Wave.#fmtChunkOffset+20,2);Wave.writeInt16(this.#buffer,Wave.#fmtChunkOffset+22,16);}
get samplePerSec(){return this.#samplePerSec;}
get sampleCount(){return this.#sampleCount;}
get dataBuffer(){return this.#buffer.subarray(Wave.#dataChunkOffset+8,this.#buffer.length);}
get blob(){return new Blob([this.#buffer],{type:"audio/wav"});}
static writeInt8(arr,pos,x){arr[pos]=x&0xFF;}
static writeInt16(arr,pos,x){arr[pos]=x&0xFF;arr[pos+1]=(x>>8)&0xFF;}
static writeInt32(arr,pos,x){arr[pos]=x&0xFF;arr[pos+1]=(x>>8)&0xFF;arr[pos+2]=(x>>16)&0xFF;arr[pos+3]=(x>>24)&0xFF;}}
const samplePerSec=32000;function kahanSum(oldSum,x,oldC){const y=x-oldC;const t=oldSum+y;const newC=(t-oldSum)-y;return[t,newC];}
function integrateLineGraphSine(points,omega){let sum=0;let c=0;for(let i=1;i<points.length;++i){const slope=(points[i][1]-points[i-1][1])/(points[i][0]-points[i-1][0]);const x1=slope*Math.sin(omega*points[i][0])/omega**2;[sum,c]=kahanSum(sum,x1,c);const x2=-slope*Math.sin(omega*points[i-1][0])/omega**2;[sum,c]=kahanSum(sum,x2,c);}
const x1=points[0][1]*Math.cos(omega*points[0][0])/omega;[sum,c]=kahanSum(sum,x1,c);const x2=-points[points.length-1][1]*Math.cos(omega*points[points.length-1][0])/omega;[sum,c]=kahanSum(sum,x2,c);return sum;}
class WaveSolver{#damp;#coefAs;#coefBs;#omegas;constructor(stringLength,waveVelocity,damp,pickup,u,ut){const length=Math.min(30,Math.floor(stringLength*Math.sqrt(samplePerSec**2+(damp/Math.PI)**2)/waveVelocity));this.#damp=damp;this.#coefAs=new Array(length);this.#coefBs=new Array(length);this.#omegas=new Array(length);for(let i=1;i<length;++i){this.#omegas[i]=Math.sqrt((i*Math.PI*waveVelocity/stringLength)**2-damp**2);this.#coefAs[i]=integrateLineGraphSine(u,i*Math.PI/stringLength)*2/stringLength*Math.sin(i*Math.PI*pickup/stringLength);this.#coefBs[i]=(damp*this.#coefAs[i]/this.#omegas[i]+integrateLineGraphSine(ut,i*Math.PI/stringLength)*2/(this.#omegas[i]*stringLength))*Math.sin(i*Math.PI*pickup/stringLength);}}
valueAt(t){let u=0;let c=0;for(let i=this.#coefAs.length-1;i>=1;--i){const x1=this.#coefAs[i]*Math.cos(this.#omegas[i]*t);const y1=x1-c;const t1=u+y1;c=(t1-u)-y1;const x2=this.#coefBs[i]*Math.sin(this.#omegas[i]*t);const y2=x2-c;const t2=t1+y2;c=(t2-t1)-y2;u=t2;}
return u*Math.exp(-this.#damp*t);}
static fundamentalFrequency(stringLength,waveVelocity,damp){return Math.sqrt((waveVelocity*0.5/stringLength)**2-(damp*0.5/Math.PI)**2);}}
function halfLifeToDampingCoefficient(life){return Math.log(2)/life;}
function solveWaveEquation(stringLength,waveVelocity,isDamping,damp,pickup,displacement,derivative,clipLength,progressCallback=(p)=>{}){const solver=new WaveSolver(stringLength,waveVelocity,isDamping?damp:0,pickup,displacement,derivative);const wav=new Wave(samplePerSec,Math.floor(samplePerSec*clipLength));const buffer=wav.dataBuffer;let initialSamples=new Array(1000);let amplitude=0.3;for(let i=0;i<initialSamples.length;++i){initialSamples[i]=solver.valueAt(i/samplePerSec);amplitude=Math.max(amplitude,Math.abs(initialSamples[i]));}
amplitude*=1.05;for(let i=0;i<initialSamples.length;++i){Wave.writeInt16(buffer,i*2,scaleDisplacement(initialSamples[i],amplitude));}
initialSamples=null;for(let i=1000,j=1000;i<wav.sampleCount;++i,++j){if(j===5000){progressCallback(i/wav.sampleCount*100+"%");j=0;}
Wave.writeInt16(buffer,i*2,scaleDisplacement(solver.valueAt(i/samplePerSec),amplitude));}
progressCallback("100%");return wav.blob;}
function scaleDisplacement(u,amplitude){return Math.floor(32767.5*u/amplitude-0.5);}
function isValidParameters(stringLength,waveVelocity,isDamping,damp){let valid=true;valid&&=stringLength>0;valid&&=waveVelocity>0;valid&&=!isDamping||Math.PI*waveVelocity/stringLength>damp;return valid;}
function onParameterChanged(stringLength,waveVelocity,isDamping,halfLife,fundamentalFrequency,pickup){fundamentalFrequency.value=WaveSolver.fundamentalFrequency(stringLength.value-0,waveVelocity.value-0,isDamping.checked?halfLifeToDampingCoefficient(halfLife.value-0):0).toFixed(3);for(const state of Object.values(graphStates))
state.setPickup(pickup.value-0+"%");halfLife.disabled=!isDamping.checked;document.getElementById("formula-damp-term").style.display=isDamping.checked?"inline":"none";}
function initializeParameterInput(){const stringLength=document.getElementById("parameter-string-length");const waveVelocity=document.getElementById("parameter-wave-velocity");const isDamping=document.getElementById("parameter-is-damping");const halfLife=document.getElementById("parameter-half-life");const fundamentalFrequency=document.getElementById("parameter-fundamental-frequency");const pickup=document.getElementById("parameter-pickup");onParameterChanged(stringLength,waveVelocity,isDamping,halfLife,fundamentalFrequency);}
const svgNS="http://www.w3.org/2000/svg";class GraphState{#svg;#nodes;#edges;#pickupLine;#children;constructor(id){this.#svg=document.getElementById(id);this.#nodes=this.#svg.querySelector(".graph-nodes");this.#edges=this.#svg.querySelector(".graph-edges");this.#pickupLine=this.#svg.querySelector(".pickup-line");const start=GraphState.createGraphNode("0%","50%");const end=GraphState.createGraphNode("100%","50%");const edge=GraphState.createGraphEdge("0%","50%","100%","50%");this.#nodes.appendChild(start);this.#nodes.appendChild(end);this.#edges.appendChild(edge);this.#children=[start,edge,end];const state=this;this.#svg.addEventListener("click",(e)=>{state.onClick(e);});}
addNode(x,y){const newNode=GraphState.createGraphNode(x,y);newNode.style.visibility="hidden";this.#nodes.appendChild(newNode);const index=this.#children.findIndex((node)=>{if(node.tagName!=="circle")
return false;return newNode.getBoundingClientRect().left<=node.getBoundingClientRect().left;});if(index===0||index===-1||newNode.getBoundingClientRect().left===this.#children[index].getBoundingClientRect().left)
return;const prevNode=this.#children[index-2];const nextNode=this.#children[index];const newPrevEdge=GraphState.createGraphEdge(prevNode.getAttribute("cx"),prevNode.getAttribute("cy"),x,y);const newNextEdge=GraphState.createGraphEdge(x,y,nextNode.getAttribute("cx"),nextNode.getAttribute("cy"));this.#edges.removeChild(this.#children[index-1]);this.#edges.appendChild(newPrevEdge);this.#edges.appendChild(newNextEdge);newNode.style.visibility="visible";this.#children.splice(index-1,1,newPrevEdge,newNode,newNextEdge);}
removeNode(node){const index=this.#children.findIndex((x)=>x===node);if(index===0||index===this.#children.length-1||index===-1){return;}
const prevNode=this.#children[index-2];const nextNode=this.#children[index+2];const newEdge=GraphState.createGraphEdge(prevNode.getAttribute("cx"),prevNode.getAttribute("cy"),nextNode.getAttribute("cx"),nextNode.getAttribute("cy"));this.#edges.removeChild(this.#children[index-1]);this.#edges.removeChild(this.#children[index+1]);this.#nodes.removeChild(node);this.#edges.appendChild(newEdge);this.#children.splice(index-1,3,newEdge);}
setPickup(x){this.#pickupLine.setAttribute("x1",x);this.#pickupLine.setAttribute("x2",x);}
onClick(e){if(e.target.tagName==="circle")
this.removeNode(e.target);else{const rect=this.#svg.getBoundingClientRect();const x=(e.clientX-rect.left)/(rect.right-rect.left)*100+"%";const y=(e.clientY-rect.top)/(rect.bottom-rect.top)*100+"%";this.addNode(x,y);}}
getPoints(){const points=new Array((this.#children.length+1)>>1);for(let i=0;i<points.length;++i){const node=this.#children[2*i];const x=node.getAttribute("cx");const y=node.getAttribute("cy");points[i]=[x.substring(0,x.length-1)/100,1-2*y.substring(0,y.length-1)/100];}
return points}
static#color="crimson";static#overColor="tomato";static createGraphNode(x,y){const node=document.createElementNS(svgNS,'circle');node.setAttribute("cx",x);node.setAttribute("cy",y);node.setAttribute("r","1mm");node.setAttribute("fill",GraphState.#color)
node.addEventListener("mouseover",(e)=>{e.currentTarget.setAttribute("fill",GraphState.#overColor);e.currentTarget.setAttribute("r","1.5mm");});node.addEventListener("mouseleave",(e)=>{e.currentTarget.setAttribute("fill",GraphState.#color);e.currentTarget.setAttribute("r","1mm");});return node;}
static createGraphEdge(x1,y1,x2,y2){const node=document.createElementNS(svgNS,'line');node.setAttribute("x1",x1);node.setAttribute("y1",y1);node.setAttribute("x2",x2);node.setAttribute("y2",y2);node.setAttribute("stroke",GraphState.#color);node.setAttribute("stroke-width","2px");return node;}}
const graphStates={};function initializeGraph(id){const state=new GraphState(id);graphStates[id]=state;state.setPickup(document.getElementById("parameter-pickup").value-0+"%");}
let prevObjectURL=null;function onOutputButtonClicked(){const stringLength=document.getElementById("parameter-string-length").value-0;const waveVelocity=document.getElementById("parameter-wave-velocity").value-0;const isDamping=document.getElementById("parameter-is-damping").checked;const halfLife=document.getElementById("parameter-half-life").value-0;const damp=halfLifeToDampingCoefficient(halfLife);const pickup=document.getElementById("parameter-pickup").value-0;const clipLength=document.getElementById("parameter-clip-length").value-0;const displacement=graphStates['initial-condition-displacement-svg'].getPoints().map((p)=>[p[0]*stringLength,p[1]]);const derivative=graphStates['initial-condition-derivative-svg'].getPoints().map((p)=>[p[0]*stringLength,500*p[1]]);const progressBar=document.getElementById("calculation-progress-bar");const player=document.getElementById("audio-player");initializeProgressBar(progressBar);if(!isValidParameters(stringLength,waveVelocity,isDamping,damp)){progressBar.classList.add("bg-danger");progressBar.style.width="100%";alert("パラメーターがー不正です。");return;}
progressBar.classList.add("bg-primary");const blob=solveWaveEquation(stringLength,waveVelocity,isDamping,damp,pickup*stringLength/100,displacement,derivative,clipLength,(progress)=>{progressBar.style.width=progress;});if(prevObjectURL!==null)
URL.revokeObjectURL(prevObjectURL);prevObjectURL=URL.createObjectURL(blob);player.src=prevObjectURL;player.style.visibility="visible";}
function initializeProgressBar(bar){bar.classList.remove("bg-danger");bar.classList.remove("bg-primary");bar.style.width="0%";}